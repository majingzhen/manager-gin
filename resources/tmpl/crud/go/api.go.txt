// Package api 自动生成模板 {{.StructName}}Api
// @description <TODO description class purpose>
// @author {{.Author}}
// @version 1.0.0
// @create {{.CreateTime}}
package api
    
import (
    "github.com/gin-gonic/gin"
    "go.uber.org/zap"
    "{{.PackageName}}/service/{{.BusinessName}}"
    "{{.PackageName}}/service/{{.BusinessName}}/view"
    "manager-gin/src/common/basic"
    response "manager-gin/src/common/response"
    "manager-gin/src/global"
    "manager-gin/src/utils"
    "strings"
)

type {{.StructName}}Api struct {
    basic.BasicApi
    {{.BusinessName}}Service {{.BusinessName}}.{{.StructName}}Service
}

// Create 创建{{.StructName}}
// @Summary 创建{{.StructName}}
// @Router /{{.BusinessName}}/create [post]
func (api *{{.StructName}}Api) Create(c *gin.Context) {
    var {{.BusinessName}}View view.{{.StructName}}CreateView
    _ = c.ShouldBindJSON(&{{.BusinessName}}View)
    {{.BusinessName}}View.Id = utils.GenUID()
    {{.BusinessName}}View.CreateTime = utils.GetCurTimeStr()
    {{.BusinessName}}View.UpdateTime = utils.GetCurTimeStr()
    {{.BusinessName}}View.CreateBy = api.GetLoginUserName(c)
    if err := api.{{.BusinessName}}Service.Create(&{{.BusinessName}}View); err != nil {
        global.Logger.Error("创建失败!", zap.Error(err))
        response.FailWithMessage("创建失败", c)
    } else {
        response.OkWithMessage("创建成功", c)
    }
}

// Delete 删除{{.StructName}}
// @Summary 删除{{.StructName}}
// @Router /{{.BusinessName}}/delete [delete]
func (api *{{.StructName}}Api) Delete(c *gin.Context) {
    idStr := c.Param("ids")
    if idStr == "" {
        response.FailWithMessage("参数解析错误", c)
        return
    }
    ids := strings.Split(idStr, ",")
    if err := api.{{.BusinessName}}Service.DeleteByIds(ids); err != nil {
        global.Logger.Error("删除失败!", zap.Error(err))
        response.FailWithMessage("删除失败", c)
    } else {
        response.OkWithMessage("删除成功", c)
    }
}

// Update 更新{{.StructName}}
// @Summary 更新{{.StructName}}
// @Router /{{.BusinessName}}/update [put]
func (api *{{.StructName}}Api) Update(c *gin.Context) {
    var {{.BusinessName}}View view.{{.StructName}}EditView
    err := c.ShouldBindJSON(&{{.BusinessName}}View)
    if err != nil {
        response.FailWithMessage("参数解析错误", c)
        return
    }
    {{.BusinessName}}View.UpdateTime = utils.GetCurTimeStr()
    {{.BusinessName}}View.UpdateBy = api.GetLoginUserName(c)
    if err := api.{{.BusinessName}}Service.Update(&{{.BusinessName}}View); err != nil {
    global.Logger.Error("更新持久化失败!", zap.Error(err))
        response.FailWithMessage("更新失败", c)
    } else {
        response.OkWithMessage("更新成功", c)
    }
}

// Get 用{{.PKColumn.JsonField}}查询{{.StructName}}
// @Summary 用id查询{{.StructName}}
// @Router /{{.BusinessName}}/get [get]
func (api *{{.StructName}}Api) Get(c *gin.Context) {
    {{.PKColumn.JsonField}} := c.Param("{{.PKColumn.JsonField}}")
    if {{.PKColumn.JsonField}} == "" {
        response.FailWithMessage("参数解析错误", c)
        return
    }
    if err, {{.BusinessName}}View := api.{{.BusinessName}}Service.Get({{.PKColumn.JsonField}}); err != nil {
        global.Logger.Error("查询失败!", zap.Error(err))
        response.FailWithMessage("查询失败", c)
    } else {
        response.OkWithData({{.BusinessName}}View, c)
    }
}

// Page 分页获取{{.StructName}}列表
// @Summary 分页获取{{.StructName}}列表
// @Router /{{.BusinessName}}/page [get]
func (api *{{.StructName}}Api) Page(c *gin.Context) {
    var pageInfo view.{{.StructName}}PageView
    // 绑定查询参数到 pageInfo
    if err := c.ShouldBindQuery(&pageInfo); err != nil {
        response.FailWithMessage("参数解析失败!", c)
        return
    }
    if err, res := api.{{.BusinessName}}Service.Page(&pageInfo); err != nil {
        global.Logger.Error("获取分页信息失败!", zap.Error(err))
        response.FailWithMessage("获取失败", c)
    } else {
        response.OkWithDetailed(res, "获取成功", c)
    }
}

// List 获取{{.StructName}}列表
// @Summary 获取{{.StructName}}列表
// @Router /{{.BusinessName}}/list [get]
func (api *{{.StructName}}Api) List(c *gin.Context) {
    var view view.{{.StructName}}QueryView
    // 绑定查询参数到 view对象
    if err := c.ShouldBindQuery(&view); err != nil {
        response.FailWithMessage("参数解析失败!", c)
        return
    }
    // 判断是否需要根据用户获取数据
    // userId := framework.GetLoginUserId(c)
    if err, res := api.{{.BusinessName}}Service.List(&view); err != nil {
        global.Logger.Error("获取数据失败!", zap.Error(err))
        response.FailWithMessage("获取失败", c)
    } else {
        response.OkWithDetailed(res, "获取成功", c)
    }
}