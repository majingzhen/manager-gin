// Package view 自动生成模板 {{.StructName}}ViewUtils
// @description <TODO description class purpose>
// @author {{.Author}}
// @version 1.0.0
// @create {{.CreateTime}}
package view

import (
    "fmt"
    "go.uber.org/zap"
    "{{.PackageName}}/model"
    "manager-gin/src/global"
    "manager-gin/src/utils"
    "manager-gin/src/common"
)

type {{.StructName}}ViewUtils struct {}

// Data2View Do转Vo
func (viewUtils *{{.StructName}}ViewUtils) Data2View(data *model.{{.StructName}}) (err error, view *{{.StructName}}View) {
    defer func() {
        if e := recover(); e != nil {
            err = fmt.Errorf("{{.StructName}}ViewUtils View2Data error: %v", e)
            global.Logger.Error("{{.StructName}}ViewUtils.Data2View:格式转换异常",
            zap.Any("error", e))
        }
    }()
    view = &{{.StructName}}View{}
    {{range .ColumnList}}{{if eq .GoType "*time.Time"}}view.{{.GoField}} = utils.Time2Str(data.{{.GoField}}){{else if eq .GoType "[]byte"}}view.{{.GoField}}=string(data.{{.GoField}}){{else}}view.{{.GoField}} = data.{{.GoField}}{{end}}
    {{end}}
    return
}

// View2Data Vo转Do
func (viewUtils *{{.StructName}}ViewUtils) View2Data(view *{{.StructName}}View) (err error, data *model.{{.StructName}}) {
    defer func() {
        if e := recover(); e != nil {
            err = fmt.Errorf("{{.StructName}}ViewUtils View2Data error: %v", e)
            global.Logger.Error("{{.StructName}}ViewUtils.View2Data:格式转换异常",
            zap.Any("error", e))
        }
    }()
    data = &model.{{.StructName}}{}
    {{range .ColumnList}}{{if eq .GoType "*time.Time"}}data.{{.GoField}} = utils.Str2Time(view.{{.GoField}}){{else if eq .GoType "[]byte"}}data.{{.GoField}} = []byte(view.{{.GoField}}){{else}}data.{{.GoField}} = view.{{.GoField}}{{end}}
    {{end}}
    return
}

// View2DataList VoList转DoList
func (viewUtils *{{.StructName}}ViewUtils) View2DataList(viewList []*{{.StructName}}View) (err error, dataList []*model.{{.StructName}}) {
    defer func() {
        if e := recover(); e != nil {
            err = fmt.Errorf("{{.StructName}}ViewUtils View2DataList error: %v", e)
            global.Logger.Error("{{.StructName}}ViewUtils.View2DataList:格式转换异常",
            zap.Any("error", e))
        }
    }()
    if viewList != nil {
        var dataTmpList []*model.{{.StructName}}
        for i := range viewList {
            view := viewList[i]
            err, data := viewUtils.View2Data(view)
            if err == nil {
                dataTmpList = append(dataTmpList, data)
            }
        }
        dataList = dataTmpList
    }
    return
}

// Data2ViewList DoList转VoList
func (viewUtils *{{.StructName}}ViewUtils) Data2ViewList(dataList []*model.{{.StructName}}) (err error, viewList []*{{.StructName}}View) {
    defer func() {
        if e := recover(); e != nil {
            err = fmt.Errorf("{{.StructName}}ViewUtils Data2ViewList error: %v", e)
            global.Logger.Error("{{.StructName}}ViewUtils.Data2ViewList:格式转换异常",
            zap.Any("error", e))
        }
    }()
    if dataList != nil {
        var viewTmpList []*{{.StructName}}View
        for i := range dataList {
            data := dataList[i]
            err, view := viewUtils.Data2View(data)
            if err == nil {
                viewTmpList = append(viewTmpList, view)
            }
        }
        viewList = viewTmpList
    }
    return
}

// PageData2ViewList 分页数据转换
func (viewUtils *{{.StructName}}ViewUtils) PageData2ViewList(pageInfo *common.PageInfo) (err error, res *common.PageInfo) {
    defer func() {
        if e := recover(); e != nil {
            err = fmt.Errorf("{{.StructName}}ViewUtils PageData2ViewList error: %v", e)
            global.Logger.Error("{{.StructName}}ViewUtils.PageData2ViewList:格式转换异常",
            zap.Any("error", e))
        }
    }()
    if pageInfo != nil && pageInfo.Rows != nil {
        if p, ok := pageInfo.Rows.([]*model.{{.StructName}}); ok {
            if err, viewList := viewUtils.Data2ViewList(p); err == nil {
                pageInfo.Rows = viewList
            }
        }
    }
    res = pageInfo
    return
}