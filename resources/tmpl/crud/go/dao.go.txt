// Package dao 自动生成模板 {{.StructName}}Dao
// @description <TODO description class purpose>
// @author {{.Author}}
// @version 1.0.0
// @create {{.CreateTime}}
package dao

import (
    "{{.PackageName}}/model"
    "{{.PackageName}}/service/{{.BusinessName}}/view"
    "manager-gin/src/common"
    "manager-gin/src/global"

)

// {{.StructName}}Dao 结构体
type {{.StructName}}Dao struct {}

// Create 新增{{.FunctionName}}记录
// Author {{.FunctionAuthor}}
func (dao *{{.StructName}}Dao) Create({{.BusinessName}} *view.{{.StructName}}CreateView) (err error) {
    return global.GormDao.Create({{.BusinessName}}).Error
}

// DeleteByIds 批量删除{{.FunctionName}}记录
// Author {{.FunctionAuthor}}
func (dao *{{.StructName}}Dao) DeleteByIds(ids []string) (err error) {
    return global.GormDao.Delete(&[]model.{{.StructName}}{}, "id in ?", ids).Error
}

// Update 更新{{.FunctionName}}记录
// Author {{.FunctionAuthor}}
func (dao *{{.StructName}}Dao) Update({{.BusinessName}} *view.{{.StructName}}EditView) (err error) {
    return global.GormDao.Updates({{.BusinessName}}).Error
}

// Get 根据id获取{{.FunctionName}}记录
// Author {{.FunctionAuthor}}
func (dao *{{.StructName}}Dao) Get({{.PKColumn.JsonField}} {{.PKColumn.GoType}}) (err error, {{.BusinessName}} *model.{{.StructName}}) {
    err = global.GormDao.Where("{{.PKColumn.ColumnName}} = ?", {{.PKColumn.JsonField}}).First({{.BusinessName}}).Error
    return
}

// Page 分页获取{{.FunctionName}}记录
// Author {{.FunctionAuthor}}
func (dao *{{.StructName}}Dao) Page(param *view.{{.StructName}}PageView) (err error, page *common.PageInfo) {
    db := global.GormDao.Model(&model.{{.StructName}}{})
    {{range .SearchColumn}}
    if param.{{.GoField}} != {{if eq .DefaultValue ""}}""{{else}}{{.DefaultValue}}{{end}}{
        {{if eq .QueryType "LIKE"}}db.Where("{{.GoField}} is like ?", "%"+param.{{.GoField}}+"%"){{else}}db.Where("{{.GoField}} = ?", param.{{.GoField}}){{end}}
    }{{end}}
    page = common.CreatePageInfo(param.PageNum, param.PageSize)
    if err = db.Count(&page.Total).Error; err != nil {
        return
    }
    // 生成排序信息
    if param.OrderByColumn != "" {
        db.Order(param.OrderByColumn + " " + param.IsAsc + " ")
    }
    var dataList []*model.{{.StructName}}
    err = db.Limit(page.Limit).Offset(page.Offset).Find(&dataList).Error
    page.Rows = dataList
    return err, page
}

// List 获取{{.FunctionName}}记录
// Author {{.FunctionAuthor}}
func (dao *{{.StructName}}Dao) List(param *view.{{.StructName}}QueryView) (err error, dataList []*model.{{.StructName}}) {
    db := global.GormDao.Model(&model.{{.StructName}}{})
    {{range .SearchColumn}}
    if param.{{.GoField}} != {{if eq .DefaultValue ""}}""{{else}}{{.DefaultValue}}{{end}} {
        {{if eq .QueryType "LIKE"}}db.Where("{{.GoField}} is like ?", "%"+param.{{.GoField}}+"%"){{else}}db.Where("{{.GoField}} = ?", param.{{.GoField}}){{end}}
    }{{end}}
    db.Order("create_time desc")
    err = db.Find(&dataList).Error
    return err, dataList
}